---
import { map } from "astro/zod";

let { rating } = Astro.props;
rating = 2.5;
const full = Math.floor(parseFloat(rating));
const half = Math.ceil(parseFloat(rating)) - full ? full + 1 : full;
const empty = 5 - full;

const colorClass: { [key: string]: string } = {
  Full: "yellow",
  Half: "grey",
  Empty: "grey",
};

const r: string[] = new Array(5).fill("Empty").map((n: string, i: number) => {
  if (i === half - 1) n = "Half";
  if (i < full) n = "Full";
  return n;
});
---

<div class="flex items-center">
  {
    r.map((n: any) => (
      <>
        <svg
          class="me-1 h-4 w-4"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 22 20"
        >
          {n === "Half" && (
            <defs>
              <linearGradient id="half_grad">
                <stop offset="50%" stop-color={colorClass[n]} />
                <stop
                  offset="50%"
                  stop-color={colorClass[n]}
                  stop-opacity="1"
                />
              </linearGradient>
            </defs>
          )}
          <path
            d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z"
            fill="url(#half_grad)"
          />
        </svg>
      </>
    ))
  }
  <p class="ms-1 text-sm font-medium text-gray-500 dark:text-gray-400">
    {rating}
  </p>
  <p class="ms-1 text-sm font-medium text-gray-500 dark:text-gray-400">
    out of
  </p>
  <p class="ms-1 text-sm font-medium text-gray-500 dark:text-gray-400">5</p>
</div>
